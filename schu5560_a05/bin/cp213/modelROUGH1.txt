//added classes: item

package cp213;

import java.util.ArrayList;

/**
 * Vending machine model. Contains the algorithms for vending products, handling
 * change and inventory, and working with credit. Should not perform any GUI
 * work of any kind.
 *
 * @author Phoebe Schulman
 * @version 2021-03-19
 */
public class VendModel {
	/*
	 * // ------debug funcs
	 * 
	 * 
	 * public void func() {// deubug System.out.println("preessed me");
	 * 
	 * System.out.println("dispnese"); Item item = new Item("jug", 4, 5); // keep
	 * track of each itme name System.out.println(item.getName());
	 * 
	 * }
	 * 
	 * public void func2() { // debug System.out.println("finishing");
	 * 
	 * Item itemTemp = new Item("ear", 5, 3); System.out.println(itemTemp);
	 * itemTemp.reduceStock(); System.out.println(itemTemp);
	 * 
	 * }
	 * 
	 * public void actionPerformed(ActionEvent e) { System.out.println("preessed");
	 * }
	 * 
	 * /// ----------end debug funcs
	 * 
	 */

	// vend modle -- as skelteon? sub classes as each step?? //-- willl have to
	// chnage meths declartios as need

	String instanceVar;// debug

	double total; // might go in dif class //shoulb set in constrcutro
	double cashInputted;
	double change; // change owed
	double changeLeft; // in machine

	boolean enteredLetter, enteredNum; // , validCode; // dont really need validcode
	String codeEntered;

	ArrayList<Item> itemsPurchased; // each time buy a thing, add to list??// Item[] itemsPurchased;
	// once letter then number{ code true ; prucahse if possible; set false}

	public VendModel() {
		this.instanceVar = "";

		total = 0.0;
		cashInputted = 0.0;
		change = 0.0;
		changeLeft = 20.0; // 20$ to first purchase $ --or make random to start

		enteredLetter = false;
		enteredNum = false;
		// validCode = false;
		codeEntered = "";

		itemsPurchased = new ArrayList<Item>();

	}

	public Item createItem() { // createItems ---create all at once? //not used.

		Item item = new Item();

		// Item itemA1 = new Item("cookie", 3.35,4);
		// a1 to a3. to d 1 to d3
		return item;
	}

	public String clickLetter(String letter) {// clickLetter() {
		// checkValidKeypad("-1"); //wont need check valie??--cuz only have buttons

		// eg- cant do leetter,cash, num// or letter, quit, num--use reset valid cod
		// case: letter leeter, number--retry

		if (enteredLetter == true) { // try again
			resetValidCode();
		}

		enteredLetter = true;
		enteredNum = false;
		// validCode = false;

		codeEntered += letter;// "a"; // add whatever letter

		System.out.println("leeter " + enteredLetter + enteredNum + codeEntered); // + validCode); // deubg
		return "a";
	}

	public String clickNum(String num) {// clickNum() {
		// checkValidKeypad("-1");

		enteredNum = true;

		if (enteredLetter == true) { // make sure only right after..
			// validCode = true;

			codeEntered += num; // based on coe entedred-make an item
			// new Item(code)--- to access it?? //getItem(code) --based on code??
			// or can pass item??
			Item item = new Item(); // debug
			purchaseItem(item);
		}

		System.out.println("number " + enteredLetter + enteredNum + codeEntered);// + validCode); // deubg
		// either way reset after
		resetValidCode();

		return "1";
	}

	public void resetValidCode() {
		System.out.println("resetValidCode"); // debug
		enteredLetter = false;
		enteredNum = false;
		// validCode = false; //dont need
		codeEntered = "";
	}

	/*
	 * 
	 * public boolean checkValidKeypad(String key) { // not need? // if !(letter a
	 * to d, num 1 to 3 , or quit) return false; // esle return true;
	 * 
	 * }
	 * 
	 * public boolean checkValidCode(String input1, String input2) { // if input 1
	 * not valid letter or quit: false // if input 2 not valid num or quit: false
	 * 
	 * // code = input 1 + input 2 return true; }
	 */

	public void purchaseItem(Item item) { // sotck --
		System.out.println("pruchas"); // deubg
		// first validate stuff --once a valid code enterd-call pruchase
		item.reduceStock();
		total += item.getPrice();

	}

	/*
	 * public boolean checkValidStock(item) { if (item.stockLeft < item.stockBought)
	 * return false; return true; }
	 */

	public void clickQuit() {
		System.out.println("quit"); // debug
		resetValidCode();

		// reutrn amount paid if any
		refund();// returnChange();

		total = 0;
		change = 0;
	}

	public void refund() {
		System.out.println("refund"); // debug

		if (cashInputted > 0.0000001) {// float //if paid: return that amount of money
			System.out.println("returning " + cashInputted); // deb
		}
		cashInputted = 0.0;
	}

	public void clickFinish() {
		System.out.println("finish"); // debug

		// if all went well: for each itme: purcahseitem()
		resetValidCode();

		// some of this stuff check for later??:
		computeChange();
		System.out.println(total + " " + cashInputted + " " + change); // debug

		if (checkValidChange()) {
			System.out.println("change ok" + change + " " + changeLeft);
			// if all ok - add to change left

			// change remianing = + (inputed amount - change) ??
			// eg: 20$ + 25c in but return 10 c = 20.15??
			changeLeft += cashInputted; // after paying??
			changeLeft -= change; // lose change in macheni after giving

		} else { // not enough chaneg in machine
			System.out.println("change error" + change + " " + changeLeft);
			refund(); // give money back
		}

		reset();
	}

	public void clickCash() { // not really do much - other than resete code
		System.out.println("cash"); // debug
		resetValidCode();
	}

	public void clickFiveCents() {
		// System.out.println("5c"); // debug
		resetValidCode();

		cashInputted += 0.5;
	}

	public void clickTenCents() {
		// System.out.println("5c"); // debug
		resetValidCode();
		cashInputted += 0.10;
	}

	public void clickTwentyFiveCents() {
		// System.out.println("5c"); // debug
		resetValidCode();
		cashInputted += 0.25;
	}

	public void clickOneDollars() {
		// System.out.println("5c"); // debug
		resetValidCode();
		cashInputted += 1;
	}

	public void clickTwoDollars() {
		// System.out.println("5c"); // debug
		resetValidCode();
		cashInputted += 2;
	}

	public void clickFiveDollars() {
		// System.out.println("5c"); // debug
		resetValidCode();
		cashInputted += 5;
	}

	public void clickTenDollars() {
		// System.out.println("5c"); // debug
		resetValidCode();
		cashInputted += 10;
	}

	public double computeTotal() { // dont need? - just dont increase total if invalid??
		return total;// return 0.0; // add up every item.getprice that was valid ( had enough stock)
	}

	public double computeCashInputted() { // paid for so far //dont need?
		// or 0.05 * click 5c counter + 0.10 + click 10c counter + ... 10 * click 10d
		return cashInputted; // return 0.0;
	}

	public double computeChange() {

		// checkValidChange(); //if false: errror?
		change = cashInputted - total;// total - cashInputted;
		return change;
		// return total - cashInputted;// return 0.0;

	}

	public boolean checkValidChange() { // (double change Owed, double changeleft) {
		if (change > changeLeft)
			return false;
		return true;
	}

	public boolean checkPaymentValid() {
		return true;
	}

	public void dispenseItems() { // - list all item names--arralist?--
		// what if order many things-- how diplsy it so it look nice
		// could do (1* cookie, 2* pop, 1* chip) etc??

		System.out.println("dispense items"); // debug
		// open window ?-print names of each itme purchased?
	}

	public void dispenseChange() {

		System.out.println("dispenseChange"); // debug
		// print: change owed
		System.out.println(change); // open window?
	}

	public void reset() {

		System.out.println("reset "); // debug
		total = 0.0;
		cashInputted = 0.0;
		change = 0.0;

		// reset total , change owed, cash inputed
		// but keep stock chnged and change left for next person
	}

	// access meths

	public double getTotal() {
		return total;
	}

	public double getCashInputted() {
		return cashInputted;
	}

	public double getChange() { // change owed
		return change;
	}

	public double getChangeLeft() {
		return changeLeft;
	}

	@Override
	public String toString() {
		return "[class " + total + " " + cashInputted + " " + change + " " + changeLeft + "]";
	}

}

/*
 * //rough idea
 * 
 * for 5 x 6 matrix -- 3 x 4
 * 
 * code : if is firts row: a + __. if 2nd row: b+___,etc
 * 
 * code: if 1st col: _ + 0, 2nd col: _ + 1, etc
 * 
 * amt in stock - rand num
 * 
 * each elem make object fo rpurache - name, code, price, amount in stock - eg
 * choclate a0 3.10$ 6
 * 
 * 
 * 
 * item(name, code, prcie, stock){}
 * 
 * 
 * 
 * ----- if item is out of stock: reject() //requested amount> stock amount:
 * return money
 * 
 * --------
 * 
 * payment type = coins or payment type = bills
 * 
 * if coins: (1c??), 5c,10c,1$,2$
 * 
 * if bils: 5$,10$. reject 20,50,100, (and any other)
 * 
 * ----- give change
 * 
 * change starting wiht = rand
 * 
 * if paid success: change contains added if not enough change: reject //as an
 * expetion?
 * 
 * ----
 * 
 * loop(yes) { enter itme to buy ; total price +=selected item price ; another
 * selection(y n q)? - if no: quit and give toltal; if quit: quit}
 * 
 * 
 * 
 * 
 * 
 * 
 */

// methds needed
/*
 * 
 * 
 * create item
 * 
 * clikcer letter
 * 
 * click num
 * 
 * check valid keypad (letter, num , quit)
 * 
 * check valid code
 * 
 * 
 * check valid stock
 * 
 * click finsih
 * 
 * click cash
 * 
 * enter fivecent enter ten cent ... enter tenbill
 * 
 * compute cash enters so far
 * 
 * compute total
 * 
 * compute change owed
 * 
 * cehck payment valid
 * 
 * 
 * 
 * displense item - list themall return change
 * 
 * dsipense change
 * 
 * 
 * reset // total , change owed, cash inputed //but keep stock chnged and change
 * left
 * 
 * 
 * class item:
 * 
 * item(name, price, stock)
 * 
 * 
 * 
 * 
 */